{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"19-5VVsGjYuWlUYTvrLHxqKDD2eOqtzTH","timestamp":1732248231634},{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1731995359302}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"8XGka5GtEBK1"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["print('Введите сначала ширину, а потом длинну')\n","shir = input()\n","dlin = input()\n","class Rectangle:\n","    def __init__(self, shir, dlin, plz, prim):\n","        self.shir = shir\n","        self.dlin = dlin\n","        self.plz = plz\n","        self.prim = prim\n","\n","\n","    def ploc(self):\n","      self.plz = self.shir * self.dlin\n","      return self.plz\n","\n","\n","    def prime(self):\n","      self.prim = self.shir + self.dlin\n","      return self.prim\n","\n","\n","figura = Rectangle(int(shir), int(dlin), 0, 0)\n","print(f\"Размеры прямоугогльника: \")\n","print(f\"Длина прямоугольника: {figura.dlin}\")\n","print(f\"Ширина прямоугольника: {figura.shir}\")\n","print(f\"Площадь прямоугольника: {figura.ploc()}\")\n","print(f\"Периметр прямоугольника: {figura.prime()}\")"],"metadata":{"id":"dG6uNPqTEAvt","colab":{"base_uri":"https://localhost:8080/"},"outputId":"beec16cb-c406-4824-c7fa-b101dbb4e1c4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите сначала ширину, а потом длинну\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["account = input()\n","balance  = 0\n","class Account_holder:\n","  def __init__(self, account, balance):\n","        self.account = account\n","        self.balance = balance\n","\n","\n","  def deposit(self):\n","    print = ('Добавить сумму к балансу:')\n","    incr = input()\n","    self.balance = self.balance + int(incr)\n","\n","\n","  def withdraw(self):\n","    print('Вычесть сумму из баланса:')\n","    decr = input()\n","    if self.balance >= int(decr):\n","      self.balance = self.balance - int(decr)\n","    elif self.balance < int(decr):\n","      print('Вычесть указанную сумму из баланса невозможно, средств недостаточно')\n","    print('Баланс: ', self.balance)\n","\n","\n","  def get_balance(self):\n","    return self.balance\n","\n","\n","denga = Account_holder(account, int(balance))\n","print('Выберите операцию: добавить или вычесть сумму')\n","operation = input()\n","if operation == 'добавить':\n","  denga.deposit()\n","elif operation == 'вычесть':\n","  denga.withdraw()\n","print(f\"текущий баланс: {denga.get_balance()}\")\n"],"metadata":{"id":"WWXNIUrCE99W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732255976627,"user_tz":-300,"elapsed":5940,"user":{"displayName":"миша разумовская","userId":"11095623423190102399"}},"outputId":"635ca7ea-1908-4417-995d-6d4926ab2568"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ор\n","Выберите операцию: добавить или вычесть сумму\n","ил\n","текущий баланс: 0\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":["#Цель: создать небольшую игру, в которой вам необходимо играть за рыцаря и сразиться с драконом\n","#Требования:\n","#Создание персонажа (имя, информация о доспехах, оружии, урон, здоровье)\n","#Управление персонажем и мини сюжет\n","#Создание дракона (Имя, информация о здоровье и уроне)\n","#Боевая система (нанесение и получение урона, урон должен быть случайным в заданном диапазоне)\n","#Реализовать бой между драконом и рыцарем\n","print('Придумайте имя рыцарю')\n","name = input()\n","print('Выберите оружие: меч, древко, лук')\n","weapon = input()\n","print('Выберите доспехи: Легкие доспехи - защита 5, тяжелые доспехи - защита 10')\n","armor = input()\n","health = 100\n","class Knight:\n","    def __init__(self, name, armor, weapon, damage, health):\n","        self.name = name\n","        self.armor = armor\n","        self.weapon = weapon\n","        self.health = health\n","        self.damage = damage\n","\n","\n","class dragon:\n","  def __init__(self, dname, ddamage, dhealth):\n","        self.dname = name\n","        self.dhealth = health\n","        self.ddamage = damage\n","\n","\n","class\n","name = input()\n","print('Выберите оружие: меч, древко, лук')\n","(10, 20)\n","weapon = input()\n","print('Выберите доспехи: Легкие доспехи - защита 5, тяжелые доспехи - защита 10')\n","armor = input()\n","health = 100\n","\n"],"metadata":{"id":"Oz9BZbhAFwua","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732256013472,"user_tz":-300,"elapsed":7561,"user":{"displayName":"миша разумовская","userId":"11095623423190102399"}},"outputId":"43ca5375-d571-4f53-8023-8e6620a86fbb"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["errg\n","Выберите оружие: меч, древко, лук\n","hggfg\n","Выберите доспехи: Легкие доспехи - защита 5, тяжелые доспехи - защита 10\n","jjuii\n"]}]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":["import string\n","texts = input()\n","table = str.maketrans(\"\", \"\", string.punctuation)\n","new_texts = texts.translate(table)\n","new_texts = new_texts.lower().split()\n","categories = {\n","    \"психология\": [\n","        \"эмоции\",\n","        \"психотерапия\",\n","        \"когнитивные искажения\",\n","        \"личностное развитие\",\n","        \"межличностные отношения\"\n","    ],\n","    \"путешествия\": [\n","        \"экзотика\",\n","        \"культура\",\n","        \"приключения\",\n","        \"туризм\",\n","        \"гид\"\n","    ],\n","    \"воспитание детей\": [\n","        \"эмоциональный интеллект\",\n","        \"дисциплина\",\n","        \"взаимопонимание\",\n","        \"игровой подход\",\n","        \"позитивное подкрепление\"\n","    ],\n","    \"дом и быт\": [\n","        \"уборка\",\n","        \"декор\",\n","        \"уют\",\n","        \"бытовая техника\",\n","        \"организация пространства\"\n","    ],\n","    \"женские темы\": [\n","        \"мода\",\n","        \"красота\",\n","        \"здоровье\",\n","        \"отношения\",\n","        \"самореализация\"\n","    ],\n","    \"хобби и творчество\": [\n","        \"ремесло\",\n","        \"искусство\",\n","        \"хобби\",\n","        \"креативность\",\n","        \"diy\"\n","    ],\n","    \"кулинария\": [\n","        \"рецепты\",\n","        \"этно-кухня\",\n","        \"здоровое питание\",\n","        \"кулинарные техники\",\n","        \"приправы\"\n","    ],\n","    \"образование\": [\n","        \"методики\",\n","        \"онлайн-курсы\",\n","        \"профессиональная подготовка\",\n","        \"мотивация\",\n","        \"доступность\"\n","    ],\n","    \"торговля\": [\n","        \"рынок\",\n","        \"маркетинг\",\n","        \"поставка\",\n","        \"оптовая торговля\",\n","        \"цены\"\n","    ],\n","    \"спорт и зож\": [\n","        \"фитнес\",\n","        \"правильное питание\",\n","        \"спортивные достижения\",\n","        \"психология спорта\",\n","        \"здоровый образ жизни\"\n","    ],\n","    \"строительство и отделка\": [\n","        \"архитектура\",\n","        \"материалы\",\n","        \"ремонт\",\n","        \"инфраструктура\",\n","        \"энергоэффективность\"\n","    ],\n","    \"it-технологии\": [\n","        \"программирование\",\n","        \"безопасность\",\n","        \"облачные технологии\",\n","        \"блокчейн\",\n","        \"искусственный интеллект\"\n","    ],\n","    \"банки и финансы\": [\n","        \"кредит\",\n","        \"инвестиции\",\n","        \"бюджетирование\",\n","        \"финансовая грамотность\",\n","        \"страхование\"\n","    ],\n","    \"косметология и медицина\": [\n","        \"уход за кожей\",\n","        \"профилактика\",\n","        \"эстетическая медицина\",\n","        \"врачебные консультации\",\n","        \"лечение\"\n","    ],\n","    \"производство\": [\n","        \"технологические процессы\",\n","        \"качество\",\n","        \"автоматизация\",\n","        \"оборудование\",\n","        \"логистика\"\n","    ],\n","    \"бизнес-процессы\": [\n","        \"организация\",\n","        \"оптимизация\",\n","        \"кост-менеджмент\",\n","        \"анализ\",\n","        \"инновации\"\n","    ],\n","    \"юридические услуги\": [\n","        \"консультация\",\n","        \"договор\",\n","        \"судебное разбирательство\",\n","        \"правовые нормы\",\n","        \"защита прав\"\n","    ]\n","}\n","p = 0\n","for y, k in categories.items():\n","  for i in k:\n","    if i in new_texts:\n","      print('Тематика текста: ', y)\n","for f in new_texts:\n","    f = f.split()\n","    for a in f:\n","      p = int(p) + 1\n","t = p * 2\n","m = p * 3\n","print('Количество символов в тексте: ', p)\n","print('Стоимость работы редактора', t, 'рублей')\n","print('Стоимость работы корректора:', m, 'рублей')"],"metadata":{"id":"GKKmdfN8GL6f"},"execution_count":null,"outputs":[]}]}